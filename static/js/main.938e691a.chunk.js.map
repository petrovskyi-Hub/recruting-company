{"version":3,"sources":["components/UsersTable/UserTable.module.css","components/FileInput/FileInput.module.css","services/checkFields.js","constants.js","components/FileInput/FileInput.js","components/UsersTable/UsersTable.js","App.js","index.js"],"names":["module","exports","checkFields","validateHaeders","headers","correctHeaders","forEach","header","i","trim","toLowerCase","Error","checkRequiredFields","data","row","length","dateCompare","date","test","checkDate","Date","checkLicNumb","licNumb","checkName","fullName","checkPhone","phone","checkEmail","email","checkDuplicate","dataArr","index","duplIndex","findIndex","element","idx","checkDuplicatePhone","checkDuplicateEmail","checkStates","states","allStatets","reduce","acc","state","Object","keys","includes","values","CorrectHeaders","STATES","ID","IA","AL","AK","AZ","AR","WY","WA","VT","VA","WI","HI","DE","GA","WV","IL","IN","CA","KS","KY","CO","CT","LA","MA","MN","MS","MO","MI","MT","ME","MD","NE","NV","NH","NJ","NY","NM","OH","OK","OR","PA","RI","ND","NC","TN","TX","FL","SD","SC","UT","FileInput","usersData","setUsersData","setError","fileInput","React","createRef","className","s","fileInputForm","onChange","event","preventDefault","current","files","Papa","parse","complete","results","errors","slice","e","console","log","fileInputLabel","htmlFor","type","id","ref","UsersTable","transformPhone","map","correct","incorrect","Number","isInteger","toFixed","split","indexOf","join","App","useState","error","role","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.938e691a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"incorrect\":\"UserTable_incorrect__X6S__\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fileInputForm\":\"FileInput_fileInputForm__1orm0\",\"fileInputLabel\":\"FileInput_fileInputLabel__2HjM6\",\"fileInput\":\"FileInput_fileInput__3k5le\"};","const validateHaeders = (headers, correctHeaders) => {\r\n  headers.forEach((header, i) => {\r\n    if (header.trim().toLowerCase() !== correctHeaders[i].toLowerCase()) {\r\n      throw new Error('incorrect headers!');\r\n    }\r\n  });\r\n};\r\n\r\nconst checkRequiredFields = data => {\r\n  data.forEach((row, i) => {\r\n    if (i !== data.length) {\r\n      if (!(row[0] && row[1] && row[2])) {\r\n        throw new Error('required field is epty!');\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst checkDate = date => {\r\n  return /^(0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01])[/](19|20)?[0-9]{2}$|^(19|20)?[0-9]{2}[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01])$/.test(\r\n    date,\r\n  );\r\n};\r\n\r\nconst dateCompare = date => {\r\n  if (checkDate(date)) {\r\n    return new Date() <= new Date(date);\r\n  } else return false;\r\n};\r\n\r\nconst checkLicNumb = licNumb => {\r\n  return /^[A-Za-z0-9]{6}$/.test(licNumb);\r\n};\r\n\r\nconst checkName = fullName => {\r\n  return /^[A-Z]{1}[a-z]+[ ][A-Z]{1}[a-z]+$/.test(fullName);\r\n};\r\n\r\nconst checkPhone = phone => {\r\n  return /^[+][1]\\d{10}$|^[1]\\d{10}$|^\\d{10}$/.test(phone);\r\n};\r\n\r\nconst checkEmail = email => {\r\n  return /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/.test(email);\r\n};\r\n\r\nconst checkDuplicate = (dataArr, row, index) => {\r\n  const duplIndex = dataArr.findIndex((element, idx) => {\r\n    if (index !== idx) {\r\n      if (element[1] === row[1] || element[2] === row[2]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  if (duplIndex === -1) {\r\n    return '';\r\n  }\r\n\r\n  return duplIndex + 1;\r\n};\r\n\r\nconst checkDuplicatePhone = (dataArr, row, index) => {\r\n  const duplIndex = dataArr.findIndex((element, idx) => {\r\n    if (index !== idx) {\r\n      if (element[1] === row[1]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  if (duplIndex === -1) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst checkDuplicateEmail = (dataArr, row, index) => {\r\n  const duplIndex = dataArr.findIndex((element, idx) => {\r\n    if (index !== idx) {\r\n      if (element[2] === row[2]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  if (duplIndex === -1) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst checkStates = (states, allStatets) => {\r\n  return states.reduce((acc, state) => {\r\n    state = state.trim();\r\n    if (acc) {\r\n      if (state.length < 2) {\r\n        return false;\r\n      }\r\n\r\n      if (state.length === 2) {\r\n        return Object.keys(allStatets).includes(state);\r\n      }\r\n\r\n      if (state.length > 2) {\r\n        return Object.values(allStatets).includes(state);\r\n      }\r\n    }\r\n\r\n    return acc;\r\n  }, true);\r\n};\r\n\r\nconst checkFields = {\r\n  validateHaeders,\r\n  checkRequiredFields,\r\n  dateCompare,\r\n  checkLicNumb,\r\n  checkName,\r\n  checkPhone,\r\n  checkEmail,\r\n  checkDuplicate,\r\n  checkDuplicatePhone,\r\n  checkDuplicateEmail,\r\n  checkStates,\r\n};\r\n\r\nexport default checkFields;\r\n","export const CorrectHeaders = [\r\n  'Full Name',\r\n  'Phone',\r\n  'Email',\r\n  'Age',\r\n  'Experience',\r\n  'Yearly Income',\r\n  'Has children',\r\n  'License states',\r\n  'Expiration date',\r\n  'License number',\r\n];\r\n\r\nexport const STATES = {\r\n  ID: 'Idaho',\r\n  IA: 'Iowa',\r\n  AL: 'Alabama',\r\n  AK: 'Alaska',\r\n  AZ: 'Arizona',\r\n  AR: 'Arkansas',\r\n  WY: 'Wyoming',\r\n  WA: 'Washington',\r\n  VT: 'Vermont',\r\n  VA: 'Virginia',\r\n  WI: 'Wisconsin',\r\n  HI: 'Hawai`i',\r\n  DE: 'Delaware',\r\n  GA: 'Georgia',\r\n  WV: 'West Virginia',\r\n  IL: 'Illinois',\r\n  IN: 'Indiana',\r\n  CA: 'California',\r\n  KS: 'Kansas',\r\n  KY: 'Kentucky',\r\n  CO: 'Colorado',\r\n  CT: 'Connecticut',\r\n  LA: 'Louisiana',\r\n  MA: 'Massachusetts',\r\n  MN: 'Minnesota',\r\n  MS: 'Mississippi',\r\n  MO: 'Missouri',\r\n  MI: 'Michigan',\r\n  MT: 'Montana',\r\n  ME: 'Maine',\r\n  MD: 'Maryland',\r\n  NE: 'Nebraska',\r\n  NV: 'Nevada',\r\n  NH: 'New Hampshire',\r\n  NJ: 'New Jersey',\r\n  NY: 'New York',\r\n  NM: 'New Mexico',\r\n  OH: 'Ohio',\r\n  OK: 'Oklahoma',\r\n  OR: 'Oregon',\r\n  PA: 'Pennsylvania',\r\n  RI: 'Rhode Island',\r\n  ND: 'North Dakota',\r\n  NC: 'North Carolina',\r\n  TN: 'Tennessee',\r\n  TX: 'Texas',\r\n  FL: 'Florida',\r\n  SD: 'South Dakota',\r\n  SC: 'South Carolina',\r\n  UT: 'Utah',\r\n};\r\n","import React from 'react';\r\nimport Papa from 'papaparse';\r\nimport PropTypes from 'prop-types';\r\nimport checkFields from '../../services/checkFields';\r\nimport { CorrectHeaders } from '../../constants';\r\nimport s from './FileInput.module.css';\r\n\r\nexport default function FileInput({ usersData, setUsersData, setError }) {\r\n  const fileInput = React.createRef();\r\n\r\n  const handleChange = event => {\r\n    event.preventDefault();\r\n    setError(false);\r\n\r\n    if (('fileInput?.current?', fileInput?.current?.files[0])) {\r\n      Papa.parse(fileInput?.current?.files[0], {\r\n        complete: function (results) {\r\n          if (results.errors.length) {\r\n            setError(true);\r\n          }\r\n\r\n          try {\r\n            checkFields.validateHaeders(results.data[0], CorrectHeaders);\r\n            checkFields.checkRequiredFields(\r\n              results.data.slice(1, results.data.length - 1),\r\n            );\r\n          } catch (e) {\r\n            console.log(e);\r\n            setError(true);\r\n          }\r\n\r\n          setUsersData(results.data.slice(1, results.data.length - 1));\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className={s.fileInputForm} onChange={handleChange}>\r\n      <label className={s.fileInputLabel} htmlFor=\"file-input\">\r\n        Import users\r\n      </label>\r\n      <input\r\n        className={s.fileInput}\r\n        type=\"file\"\r\n        id=\"file-input\"\r\n        ref={fileInput}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nFileInput.propTypes = {\r\n  setUsersData: PropTypes.func.isRequired,\r\n  setError: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { CorrectHeaders, STATES } from '../../constants';\r\nimport checkFields from '../../services/checkFields';\r\nimport s from './UserTable.module.css';\r\n\r\nexport default function UsersTable({ usersData }) {\r\n  const transformPhone = phone => {\r\n    if (checkFields.checkPhone(phone)) {\r\n      if (phone.length === 10) {\r\n        return '+1' + phone;\r\n      } else if (phone.length === 11) {\r\n        return '+' + phone;\r\n      }\r\n    }\r\n\r\n    return phone;\r\n  };\r\n\r\n  const transformStates = (states, allStatets) => {\r\n    if (checkFields.checkStates(states, allStatets)) {\r\n      const newStates = states.map(state => {\r\n        state = state.trim();\r\n        if (state.length === 2) {\r\n          return state;\r\n        }\r\n\r\n        if (state.length > 2) {\r\n          const index = Object.values(allStatets).indexOf(state);\r\n          return Object.keys(allStatets)[index];\r\n        }\r\n\r\n        return state;\r\n      });\r\n\r\n      return newStates.join(', ');\r\n    }\r\n\r\n    return states.join(', ');\r\n  };\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr key=\"0\">\r\n          <th key=\"01\">ID</th>\r\n          {CorrectHeaders.map((data, i) => (\r\n            <th key={i}>{data.trim()}</th>\r\n          ))}\r\n          <th key=\"02\">Duplicate with</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {usersData.map(\r\n          (row, i) => (\r\n            <tr key={i}>\r\n              {/* ID */}\r\n              <td key=\"0\">{i + 1}</td>\r\n              {/* Full Name */}\r\n              <td\r\n                key=\"1\"\r\n                className={\r\n                  checkFields.checkName(row[0].trim()) ? s.correct : s.incorrect\r\n                }\r\n              >\r\n                {row[0].trim()}\r\n              </td>\r\n              {/* Phone */}\r\n              <td\r\n                key=\"2\"\r\n                className={\r\n                  checkFields.checkPhone(row[1].trim()) &&\r\n                  !checkFields.checkDuplicatePhone(usersData, row, i)\r\n                    ? s.correct\r\n                    : s.incorrect\r\n                }\r\n              >\r\n                {transformPhone(row[1].trim())}\r\n              </td>\r\n              {/* Email */}\r\n              <td\r\n                key=\"3\"\r\n                className={\r\n                  checkFields.checkEmail(row[2].trim()) &&\r\n                  !checkFields.checkDuplicateEmail(usersData, row, i)\r\n                    ? s.correct\r\n                    : s.incorrect\r\n                }\r\n              >\r\n                {row[2].trim()}\r\n              </td>\r\n              {/* Age */}\r\n              <td\r\n                key=\"4\"\r\n                className={\r\n                  Number.isInteger(Number(row[3])) && Number(row[3]) >= 21\r\n                    ? s.correct\r\n                    : s.incorrect\r\n                }\r\n              >\r\n                {row[3].trim()}\r\n              </td>\r\n              {/* Experience */}\r\n              <td\r\n                key=\"5\"\r\n                className={\r\n                  row[4] >= 0 && row[4] <= row[3] ? s.correct : s.incorrect\r\n                }\r\n              >\r\n                {row[4].trim()}\r\n              </td>\r\n              {/* Yearly Income */}\r\n              <td\r\n                key=\"6\"\r\n                className={\r\n                  row[5] >= 0 && row[5] <= 1e6 ? s.correct : s.incorrect\r\n                }\r\n              >\r\n                {Number(row[5]).toFixed(2)}\r\n              </td>\r\n              {/* Has children */}\r\n              <td\r\n                key=\"7\"\r\n                className={\r\n                  row[6].trim() === 'TRUE' ||\r\n                  row[6].trim() === 'FALSE' ||\r\n                  row[6].trim() === ''\r\n                    ? s.correct\r\n                    : s.incorrect\r\n                }\r\n              >\r\n                {row[6].trim() === '' ? 'FALSE' : row[6].trim()}\r\n              </td>\r\n              {/* License states */}\r\n              <td\r\n                key=\"8\"\r\n                className={\r\n                  checkFields.checkStates(row[7].trim().split('|'), STATES)\r\n                    ? s.correct\r\n                    : s.incorrect\r\n                }\r\n              >\r\n                {transformStates(row[7].trim().split('|'), STATES)}\r\n              </td>\r\n              {/* Expiration date */}\r\n              <td\r\n                key=\"9\"\r\n                className={\r\n                  checkFields.dateCompare(row[8].trim())\r\n                    ? s.correct\r\n                    : s.incorrect\r\n                }\r\n              >\r\n                {row[8].trim()}\r\n              </td>\r\n              {/* License number */}\r\n              <td\r\n                key=\"10\"\r\n                className={\r\n                  checkFields.checkLicNumb(row[9].trim())\r\n                    ? s.correct\r\n                    : s.incorrect\r\n                }\r\n              >\r\n                {row[9].trim()}\r\n              </td>\r\n              {/* Duplicate with */}\r\n              <td key=\"11\">{checkFields.checkDuplicate(usersData, row, i)}</td>\r\n            </tr>\r\n          ),\r\n          // ),\r\n        )}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nUsersTable.propTypes = {\r\n  usersData: PropTypes.array.isRequired,\r\n};\r\n","import { useState } from 'react';\nimport './App.css';\nimport FileInput from './components/FileInput';\nimport UsersTable from './components/UsersTable';\n\nfunction App() {\n  const [usersData, setUsersData] = useState([]);\n  const [error, setError] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <FileInput\n        usersData={usersData}\n        setUsersData={setUsersData}\n        setError={setError}\n      />\n      <>\n        {error ? (\n          <p className=\"error\" role=\"alert\">\n            File format is not correct\n          </p>\n        ) : (\n          usersData.length > 0 && (\n            <UsersTable usersData={usersData} setError={setError} />\n          )\n        )}\n      </>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}